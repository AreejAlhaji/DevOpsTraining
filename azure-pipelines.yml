# Trigger pipeline each time master branch is updated.
trigger: 
- master
stages:
- stage: 'Build'
  displayName: 'Build Angular application'
  jobs:
  - job: 'Build'
    displayName: 'Build application'
    pool:
      # Virtual machine image that will be used in order to create required machine.
      vmImage: 'ubuntu-latest'
    variables:
      # Use variables that can be found within Build variable group.
    - group: Build
    steps:
    #- task: AzureResourceManagerTemplateDeployment@3
      # Deploy Azure resources.
      #inputs:
        #deploymentScope: 'Resource Group'
        #azureResourceManagerConnection: '$(ConnectedServiceName)'
        #subscriptionId: '$(VisualStudioSubscriptionId)'
        #action: 'Create Or Update Resource Group'
        #resourceGroupName: 'training-web-app-rg'
        #location: 'North Europe'
        #templateLocation: 'URL of the file'
        #csmFileLink: 'https://raw.githubusercontent.com/Memija/progress/master/arm/templates/template.json'
        #overrideParameters: '-connected_service_name_value "$(ConnectedServiceName)" -tenant_id_value "$(TenantId)" -visual_studio_subscription_id "$(VisualStudioSubscriptionId)"'
        #deploymentMode: 'Incremental'
      #displayName: 'Deploy Azure resources'
    - task: NodeTool@0
      # Install required Node.js version on which the application will run.
      inputs:
        versionSpec: '12.x'
      displayName: 'Install Node.js'
    - task: Npm@1
      # Install Angular Command Line Interface.
      inputs:
        command: 'custom'
        customCommand: 'install -g @angular/cli'
      displayName: 'Install Angular CLI'
    - task: Npm@1
      # Install required NPM packages.
      inputs:
        command: 'install'
      displayName: 'Install npm packages'
    - task: FileTransform@1
      # Change configuration value.
      inputs:
        folderPath: '$(System.DefaultWorkingDirectory)/src/app/configuration/'
        fileType: json
        targetFiles: configuration.json
      displayName: 'Change configuration value'
    - task: Npm@1
      # Build application.
      inputs:
        command: 'custom'
        customCommand: 'run build'
      displayName: 'Build app'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop
      
- template: templates/deploy.yml
  parameters:
    deployment: 'DeployDevelopment'
    dependsOn: 'Build'
    displayName: 'Deploy Angular application to development environment'
    environment: 'Development'
    stageName: 'DeployDevelopment'
    webAppName: '$(DevEnvironemntWebAppName)'

- template: templates/deploy.yml
  parameters:
    deployment: 'DeployTest'
    dependsOn: 'Build'
    displayName: 'Deploy Angular application to test environment'
    environment: 'Test'
    stageName: 'DeployTest'
    webAppName: '$(TestEnvironemntWebAppName)'

- template: templates/deploy.yml
  parameters:
    deployment: 'DeployProduction'
    dependsOn: 'DeployStaging'
    displayName: 'Deploy Angular application to production environment'
    environment: 'Production'
    stageName: 'DeployProduction'
    webAppName: '$(WebAppName)'

- template: templates/deploy.yml
  parameters:
    deployment: 'DeployStaging'
    dependsOn: 'DeployTest'
    displayName: 'Deploy Angular application to staging environment'
    environment: 'Staging'
    stageName: 'DeployStaging'
    webAppName: '$(StagingEnvironemntWebAppName)'
